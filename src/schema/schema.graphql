type Query {
    "info of students"
    students: [Student!]!

    "info of student"
    student(id: ID!): Student!
    
    "List of courses"
    courses: [Course!]!
    
    "Get course by id"
    course(id: ID!): Course!
}

type Mutation {
    addCourse(course: CourseInput!): Course!
    editCourse(course: CourseInput!): Course!
    deleteCourse(id: ID!): Course!
}

input CourseInput {
    id: ID
    title: String!
    description: String!
    clases: Int!
    time: Float!
    logo: String!
    level: Level=ALL
    path: String!
    teacher: String!
}

"Informaci√≥n de los estudiantes"
type Student {
    "id del estudiante"
    id: ID!
    name: String!
    email: String!
    website: String
    courses: [Course!]!
}

type Course {
    id: ID!
    title: String!
    description: String!
    clases: Int!
    time: Float!
    logo: String!
    level: Level
    path: String!
    teacher: String!
    students: [Student]
    reviews: [Rating!]!
}

enum Level {
    ALL
    BEGINNER
    INTERMEDIATE
    EXPERT
}

type Rating {
    id: ID!
    name: String!
    points: Float!
    comment: String
}